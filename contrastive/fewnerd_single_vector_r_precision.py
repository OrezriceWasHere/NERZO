import ijson
import numpy as np
from collections import defaultdict
import faiss

# Path to the json file generated by forward_fewnerd_nv_embed_v2.py
dataset = "forward_fewnerd_nv_embed_v2.json"

# Embedding key holding the sentence embedding vector
embedding_key = "nv_embed_v2"


def load_embeddings(path, embedding_key):
    """Load embeddings and labels from a huge json file using ijson."""
    embeddings = []
    labels = []
    with open(path, "rb") as f:
        for item in ijson.items(f, "item"):
            if embedding_key not in item:
                raise KeyError(f"embedding key {embedding_key} not found in item")
            embeddings.append(item[embedding_key])
            labels.append(item["fine_type"])
    return np.asarray(embeddings, dtype=np.float32), labels


def r_precision(embeddings, labels):
    labels = np.asarray(labels)

    # normalize for cosine similarity
    faiss.normalize_L2(embeddings)
    dim = embeddings.shape[1]
    index = faiss.IndexFlatIP(dim)
    index.add(embeddings)

    count_per_label = defaultdict(int)
    for label in labels:
        count_per_label[label] += 1

    scores_per_label = defaultdict(list)
    for idx, label in enumerate(labels):
        r = count_per_label[label] - 1
        if r <= 0:
            continue
        D, I = index.search(embeddings[idx : idx + 1], r + 1)
        retrieved = labels[I[0][1:]]
        score = np.sum(retrieved == label) / r
        scores_per_label[label].append(score)

    results = {label: float(np.mean(scores)) for label, scores in scores_per_label.items()}
    macro = float(np.mean(list(results.values()))) if results else 0.0
    return results, macro


def main():
    emb, labs = load_embeddings(dataset, embedding_key)
    scores, avg_score = r_precision(emb, labs)

    print("R-precision per fine type:")
    for k, v in sorted(scores.items()):
        print(f"{k}: {v:.4f}")
    print(f"Average R-precision: {avg_score:.4f}")


if __name__ == "__main__":
    main()
